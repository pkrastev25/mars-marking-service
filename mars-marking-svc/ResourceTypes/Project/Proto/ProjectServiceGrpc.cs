// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProjectService.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Project {
  public static partial class ProjectService
  {
    static readonly string __ServiceName = "project.ProjectService";

    static readonly grpc::Marshaller<global::Project.CreateProjectRequest> __Marshaller_CreateProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.CreateProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.IdReply> __Marshaller_IdReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.IdReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.GetProjectByIdRequest> __Marshaller_GetProjectByIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.GetProjectByIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.Project> __Marshaller_Project = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.Project.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.UpdateProjectRequest> __Marshaller_UpdateProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.UpdateProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.IdRequest> __Marshaller_IdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.IdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.ProjectFilter> __Marshaller_ProjectFilter = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.ProjectFilter.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.MemberRequest> __Marshaller_MemberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.MemberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.Member> __Marshaller_Member = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.Member.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.MemberFilter> __Marshaller_MemberFilter = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.MemberFilter.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.MemberPermissionRequest> __Marshaller_MemberPermissionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.MemberPermissionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.PermissionValueReply> __Marshaller_PermissionValueReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.PermissionValueReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Project.PermissionDefault> __Marshaller_PermissionDefault = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Project.PermissionDefault.Parser.ParseFrom);

    static readonly grpc::Method<global::Project.CreateProjectRequest, global::Project.IdReply> __Method_CreateProject = new grpc::Method<global::Project.CreateProjectRequest, global::Project.IdReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateProject",
        __Marshaller_CreateProjectRequest,
        __Marshaller_IdReply);

    static readonly grpc::Method<global::Project.GetProjectByIdRequest, global::Project.Project> __Method_GetProject = new grpc::Method<global::Project.GetProjectByIdRequest, global::Project.Project>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProject",
        __Marshaller_GetProjectByIdRequest,
        __Marshaller_Project);

    static readonly grpc::Method<global::Project.UpdateProjectRequest, global::Project.Empty> __Method_UpdateProject = new grpc::Method<global::Project.UpdateProjectRequest, global::Project.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProject",
        __Marshaller_UpdateProjectRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Project.IdRequest, global::Project.Empty> __Method_DeleteProject = new grpc::Method<global::Project.IdRequest, global::Project.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteProject",
        __Marshaller_IdRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Project.ProjectFilter, global::Project.Project> __Method_ListProjects = new grpc::Method<global::Project.ProjectFilter, global::Project.Project>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListProjects",
        __Marshaller_ProjectFilter,
        __Marshaller_Project);

    static readonly grpc::Method<global::Project.MemberRequest, global::Project.Member> __Method_GetMember = new grpc::Method<global::Project.MemberRequest, global::Project.Member>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMember",
        __Marshaller_MemberRequest,
        __Marshaller_Member);

    static readonly grpc::Method<global::Project.MemberFilter, global::Project.Member> __Method_ListMembers = new grpc::Method<global::Project.MemberFilter, global::Project.Member>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListMembers",
        __Marshaller_MemberFilter,
        __Marshaller_Member);

    static readonly grpc::Method<global::Project.MemberRequest, global::Project.Member> __Method_AddMember = new grpc::Method<global::Project.MemberRequest, global::Project.Member>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddMember",
        __Marshaller_MemberRequest,
        __Marshaller_Member);

    static readonly grpc::Method<global::Project.MemberRequest, global::Project.Empty> __Method_RemoveMember = new grpc::Method<global::Project.MemberRequest, global::Project.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveMember",
        __Marshaller_MemberRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Project.MemberPermissionRequest, global::Project.PermissionValueReply> __Method_GetMemberPermission = new grpc::Method<global::Project.MemberPermissionRequest, global::Project.PermissionValueReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMemberPermission",
        __Marshaller_MemberPermissionRequest,
        __Marshaller_PermissionValueReply);

    static readonly grpc::Method<global::Project.Empty, global::Project.PermissionDefault> __Method_ListPermissionDefaults = new grpc::Method<global::Project.Empty, global::Project.PermissionDefault>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ListPermissionDefaults",
        __Marshaller_Empty,
        __Marshaller_PermissionDefault);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Project.ProjectServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProjectService</summary>
    public abstract partial class ProjectServiceBase
    {
      /// <summary>
      /// project
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Project.IdReply> CreateProject(global::Project.CreateProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Project.Project> GetProject(global::Project.GetProjectByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Project.Empty> UpdateProject(global::Project.UpdateProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Project.Empty> DeleteProject(global::Project.IdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ListProjects(global::Project.ProjectFilter request, grpc::IServerStreamWriter<global::Project.Project> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// member
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Project.Member> GetMember(global::Project.MemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ListMembers(global::Project.MemberFilter request, grpc::IServerStreamWriter<global::Project.Member> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Project.Member> AddMember(global::Project.MemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Project.Empty> RemoveMember(global::Project.MemberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Project.PermissionValueReply> GetMemberPermission(global::Project.MemberPermissionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// permissions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ListPermissionDefaults(global::Project.Empty request, grpc::IServerStreamWriter<global::Project.PermissionDefault> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProjectService</summary>
    public partial class ProjectServiceClient : grpc::ClientBase<ProjectServiceClient>
    {
      /// <summary>Creates a new client for ProjectService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProjectServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProjectService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProjectServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProjectServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProjectServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// project
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Project.IdReply CreateProject(global::Project.CreateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// project
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Project.IdReply CreateProject(global::Project.CreateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateProject, null, options, request);
      }
      /// <summary>
      /// project
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Project.IdReply> CreateProjectAsync(global::Project.CreateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// project
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Project.IdReply> CreateProjectAsync(global::Project.CreateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateProject, null, options, request);
      }
      public virtual global::Project.Project GetProject(global::Project.GetProjectByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Project.Project GetProject(global::Project.GetProjectByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Project> GetProjectAsync(global::Project.GetProjectByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Project> GetProjectAsync(global::Project.GetProjectByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProject, null, options, request);
      }
      public virtual global::Project.Empty UpdateProject(global::Project.UpdateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Project.Empty UpdateProject(global::Project.UpdateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Empty> UpdateProjectAsync(global::Project.UpdateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Empty> UpdateProjectAsync(global::Project.UpdateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProject, null, options, request);
      }
      public virtual global::Project.Empty DeleteProject(global::Project.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Project.Empty DeleteProject(global::Project.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteProject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Empty> DeleteProjectAsync(global::Project.IdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Empty> DeleteProjectAsync(global::Project.IdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteProject, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Project.Project> ListProjects(global::Project.ProjectFilter request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Project.Project> ListProjects(global::Project.ProjectFilter request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListProjects, null, options, request);
      }
      /// <summary>
      /// member
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Project.Member GetMember(global::Project.MemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// member
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Project.Member GetMember(global::Project.MemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMember, null, options, request);
      }
      /// <summary>
      /// member
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Project.Member> GetMemberAsync(global::Project.MemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// member
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Project.Member> GetMemberAsync(global::Project.MemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMember, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Project.Member> ListMembers(global::Project.MemberFilter request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Project.Member> ListMembers(global::Project.MemberFilter request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListMembers, null, options, request);
      }
      public virtual global::Project.Member AddMember(global::Project.MemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Project.Member AddMember(global::Project.MemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Member> AddMemberAsync(global::Project.MemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Member> AddMemberAsync(global::Project.MemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddMember, null, options, request);
      }
      public virtual global::Project.Empty RemoveMember(global::Project.MemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveMember(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Project.Empty RemoveMember(global::Project.MemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveMember, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Empty> RemoveMemberAsync(global::Project.MemberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveMemberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Project.Empty> RemoveMemberAsync(global::Project.MemberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveMember, null, options, request);
      }
      public virtual global::Project.PermissionValueReply GetMemberPermission(global::Project.MemberPermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Project.PermissionValueReply GetMemberPermission(global::Project.MemberPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMemberPermission, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Project.PermissionValueReply> GetMemberPermissionAsync(global::Project.MemberPermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMemberPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Project.PermissionValueReply> GetMemberPermissionAsync(global::Project.MemberPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMemberPermission, null, options, request);
      }
      /// <summary>
      /// permissions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Project.PermissionDefault> ListPermissionDefaults(global::Project.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPermissionDefaults(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// permissions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Project.PermissionDefault> ListPermissionDefaults(global::Project.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ListPermissionDefaults, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProjectServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProjectServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProjectServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateProject, serviceImpl.CreateProject)
          .AddMethod(__Method_GetProject, serviceImpl.GetProject)
          .AddMethod(__Method_UpdateProject, serviceImpl.UpdateProject)
          .AddMethod(__Method_DeleteProject, serviceImpl.DeleteProject)
          .AddMethod(__Method_ListProjects, serviceImpl.ListProjects)
          .AddMethod(__Method_GetMember, serviceImpl.GetMember)
          .AddMethod(__Method_ListMembers, serviceImpl.ListMembers)
          .AddMethod(__Method_AddMember, serviceImpl.AddMember)
          .AddMethod(__Method_RemoveMember, serviceImpl.RemoveMember)
          .AddMethod(__Method_GetMemberPermission, serviceImpl.GetMemberPermission)
          .AddMethod(__Method_ListPermissionDefaults, serviceImpl.ListPermissionDefaults).Build();
    }

  }
}
#endregion
